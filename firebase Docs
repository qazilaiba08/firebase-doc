
Firebase intinalize
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

// TODO: Replace the following with your app's Firebase project configuration
// See: https://firebase.google.com/docs/web/learn-more#config-object
const firebaseConfig = {
  // ...
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);


// Initialize Firebase Authentication and get a reference to the service
const auth = getAuth(app);

Firebase Authentication
import { getAuth, createUserWithEmailAndPassword } from "firebase/auth";

const auth = getAuth();
createUserWithEmailAndPassword(auth, email, password)
  .then((userCredential) => {
    // Signed up 
    const user = userCredential.user;
    // ...
  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
    // ..
  });

firebase SignIn 
import { getAuth, signInWithEmailAndPassword } from "firebase/auth";

const auth = getAuth();
signInWithEmailAndPassword(auth, email, password)
  .then((userCredential) => {
    // Signed in 
    const user = userCredential.user;
    // ...
  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
  });

firebase Google Sign in
import { GoogleAuthProvider } from "firebase/auth";

const provider = new GoogleAuthProvider();


Samples
Filter

Firebase
Docs
Build
Was this helpful?

Send feedbackAuthenticate Using Google with JavaScript 

bookmark_border
You can let your users authenticate with Firebase using their Google Accounts. You can either use the Firebase SDK to carry out the Google sign-in flow, or carry out the sign-in flow manually using the Sign In With Google library and passing the resulting ID token to Firebase.

Before you begin
Add Firebase to your JavaScript project.
Enable Google as a sign-in method in the Firebase console:
In the Firebase console, open the Auth section.
On the Sign in method tab, enable the Google sign-in method and click Save.
Handle the sign-in flow with the Firebase SDK
If you are building a web app, the easiest way to authenticate your users with Firebase using their Google Accounts is to handle the sign-in flow with the Firebase JavaScript SDK. (If you want to authenticate a user in Node.js or other non-browser environment, you must handle the sign-in flow manually.)

To handle the sign-in flow with the Firebase JavaScript SDK, follow these steps:

Create an instance of the Google provider object:
Web
Web
Learn more about the tree-shakeable modular Web API and upgrade from the namespaced API.

import { GoogleAuthProvider } from "firebase/auth";

const provider = new GoogleAuthProvider();

signInWithPopup(auth, provider)
  .then((result) => {
    // This gives you a Google Access Token. You can use it to access the Google API.
    const credential = GoogleAuthProvider.credentialFromResult(result);
    const token = credential.accessToken;
    // The signed-in user info.
    const user = result.user;
    // IdP data available using getAdditionalUserInfo(result)
    // ...
  }).catch((error) => {
    // Handle Errors here.
    const errorCode = error.code;
    const errorMessage = error.message;
    // The email of the user's account used.
    const email = error.customData.email;
    // The AuthCredential type that was used.
    const credential = GoogleAuthProvider.credentialFromError(error);
    // ...
  });



Firebase 
import { getAuth, onAuthStateChanged } from "firebase/auth";

const auth = getAuth();
onAuthStateChanged(auth, (user) => {
  if (user) {
    // User is signed in, see docs for a list of available properties
    // https://firebase.google.com/docs/reference/js/auth.user
    const uid = user.uid;
    // ...
  } else {
    // User is signed out
    // ...
  }
});

Firebase SignOut
import { getAuth, signOut } from "firebase/auth";

const auth = getAuth();
signOut(auth).then(() => {
  // Sign-out successful.
}).catch((error) => {
  // An error happened.
});

<--------Firebase Firestore ------>
,query,orderBy,serverTimestamp,onSnapshot ,getDoc , getDocs ,updateDoc,arrayUnion, arrayRemove  ,getFirestore,setDoc ,doc,collection, addDoc} from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js";

import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

// TODO: Replace the following with your app's Firebase project configuration
// See: https://support.google.com/firebase/answer/7015592
const firebaseConfig = {
    FIREBASE_CONFIGURATION
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);


// Initialize Cloud Firestore and get a reference to the service
const db = getFirestore(app);

///// AddDoc

import { collection, addDoc } from "firebase/firestore"; 

try {
  const docRef = await addDoc(collection(db, "users"), {
    first: "Ada",
    last: "Lovelace",
    born: 1815
  });
  console.log("Document written with ID: ", docRef.id);
} catch (e) {
  console.error("Error adding document: ", e);
}

///Multiple doc mangwana ka liy use hoga
import { collection, getDocs } from "firebase/firestore"; 

const querySnapshot = await getDocs(collection(db, "users"));
querySnapshot.forEach((doc) => {
  console.log(`${doc.id} => ${doc.data()}`);
});

//Set a document
To create or overwrite a single document, use the following language-specific set() methods:
Use the setDoc() method:

import { doc, setDoc } from "firebase/firestore"; 

// Add a new document in collection "cities"
await setDoc(doc(db, "cities", "LA"), {
  name: "Los Angeles",
  state: "CA",
  country: "USA"
});

//// Qurey
const usersRef = collection(db, "users");

// const q = query(usersRef,orderBy("name","desc")) 
const q = query(usersRef,where("age",">","18")) 

const unsubscribe = onSnapshot(q, (querySnapshot) => {
   console.count("calling");
  let userDiv = document.getElementById("userName");
  userDiv.innerHTML = "";
  querySnapshot.forEach((doc) => {
   

    userDiv.innerHTML += `<p> ${doc.data().name}</p>`;
    console.log(doc.data().name);
  });
});
 // get a single doc

  // const docRef = doc(db, "users", "4654654");
  // const docSnap = await getDoc(docRef);

  // if (docSnap.exists()) {
  //   let time = docSnap.data().time
  //   console.log("Document data:",`${time.toString()}`);
  //   // console.log(time);
  // } else {
  //   // docSnap.data() will be undefined in this case
  //   console.log("No such document!");
  // }
});

  // read all documents
  // try {
  //   const querySnapshot = await getDocs(collection(db, "users"));

  //   querySnapshot.forEach((doc) => {
  //     console.log(`${doc.id} =>` ,doc.data());
  //   });
  // } catch (e) {
  //   console.log(e);
  // }

  // const userRef = doc(db, "users", "64564654654");

  // try {
  //   await updateDoc(userRef, {
  //     colors: arrayUnion("red","blue","yellow")
  // });
  //   console.log("array included");
  // } catch (e) {
  //   console.log(e);

 // update all documents

  // const userRef = doc(db, "users", "42345454545");
  // try {
  //   await updateDoc(userRef, {
  //     "favorites.subject":"Maths",
  //   });
  //   console.log("data updated");
  // } catch (e) {
  //   console.log(e);
  // }
  // }
Use the deleteDoc() method:

import { doc, deleteDoc } from "firebase/firestore";

await deleteDoc(doc(db, "cities", "DC"));

Cloudinary 
const cloudName = "dvsoxp0be";
const unsignedUploadPreset = "qweng7nv";

let fileInput = document.getElementById("fileInput");
let gallery = document.getElementById("gallery");
fileInput.addEventListener("change", () => {
  let file = fileInput.files[0];
  let url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;

  let fd = new FormData();
  fd.append("upload_preset", unsignedUploadPreset);
  fd.append("file", file);

  fetch(url, {
    method: "POST",
    body: fd,
  })
    .then((response) => response.json())
    .then((data) => {
      let resourceURl = data.secure_url;

      let transformedUrl = resourceURl.replace(
        "upload/",
        "upload/h_200,w_200/r_max/c_crop,g_face"
      );
      console.log("uploaded succesfully", resourceURl);

      console.log(data);

      if (data.format == "pdf" || data.format == "mp4") {
        let iframe = document.createElement("iframe");
        iframe.src = resourceURl;
        iframe.width = "500px";
        iframe.height = "500px";
        gallery.appendChild(iframe);
        console.log(iframe);
      } else {
        let img = new Image();
        img.src = transformedUrl;

        gallery.appendChild(img);
      }
    })
    .catch((e) => {
      console.log(e);
    });
});

let dropArea = document.getElementById("dropArea");

dropArea.addEventListener("dragover", (e) => {
  e.preventDefault();
  console.log("dragging over");
});
// dropArea.addEventListener("dragleave",()=>{
//     console.log("leaving");
// })
dropArea.addEventListener("drop", (event) => {
  event.stopPropagation();
  event.preventDefault();
  console.log("dropped");

  console.log(event.dataTransfer.files);
});

import { query, orderBy } from "firebase/firestore";  

const q = query(citiesRef, orderBy("state"), orderBy("population", "desc"));
